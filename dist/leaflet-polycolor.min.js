(function() {
  'use strict';

  var globals = typeof global === 'undefined' ? self : global;
  if (typeof globals.require === 'function') return;

  var modules = {};
  var cache = {};
  var aliases = {};
  var has = {}.hasOwnProperty;

  var expRe = /^\.\.?(\/|$)/;
  var expand = function(root, name) {
    var results = [], part;
    var parts = (expRe.test(name) ? root + '/' + name : name).split('/');
    for (var i = 0, length = parts.length; i < length; i++) {
      part = parts[i];
      if (part === '..') {
        results.pop();
      } else if (part !== '.' && part !== '') {
        results.push(part);
      }
    }
    return results.join('/');
  };

  var dirname = function(path) {
    return path.split('/').slice(0, -1).join('/');
  };

  var localRequire = function(path) {
    return function expanded(name) {
      var absolute = expand(dirname(path), name);
      return globals.require(absolute, path);
    };
  };

  var initModule = function(name, definition) {
    var hot = hmr && hmr.createHot(name);
    var module = {id: name, exports: {}, hot: hot};
    cache[name] = module;
    definition(module.exports, localRequire(name), module);
    return module.exports;
  };

  var expandAlias = function(name) {
    var val = aliases[name];
    return (val && name !== val) ? expandAlias(val) : name;
  };

  var _resolve = function(name, dep) {
    return expandAlias(expand(dirname(name), dep));
  };

  var require = function(name, loaderPath) {
    if (loaderPath == null) loaderPath = '/';
    var path = expandAlias(name);

    if (has.call(cache, path)) return cache[path].exports;
    if (has.call(modules, path)) return initModule(path, modules[path]);

    throw new Error("Cannot find module '" + name + "' from '" + loaderPath + "'");
  };

  require.alias = function(from, to) {
    aliases[to] = from;
  };

  var extRe = /\.[^.\/]+$/;
  var indexRe = /\/index(\.[^\/]+)?$/;
  var addExtensions = function(bundle) {
    if (extRe.test(bundle)) {
      var alias = bundle.replace(extRe, '');
      if (!has.call(aliases, alias) || aliases[alias].replace(extRe, '') === alias + '/index') {
        aliases[alias] = bundle;
      }
    }

    if (indexRe.test(bundle)) {
      var iAlias = bundle.replace(indexRe, '');
      if (!has.call(aliases, iAlias)) {
        aliases[iAlias] = bundle;
      }
    }
  };

  require.register = require.define = function(bundle, fn) {
    if (bundle && typeof bundle === 'object') {
      for (var key in bundle) {
        if (has.call(bundle, key)) {
          require.register(key, bundle[key]);
        }
      }
    } else {
      modules[bundle] = fn;
      delete cache[bundle];
      addExtensions(bundle);
    }
  };

  require.list = function() {
    var list = [];
    for (var item in modules) {
      if (has.call(modules, item)) {
        list.push(item);
      }
    }
    return list;
  };

  var hmr = globals._hmr && new globals._hmr(_resolve, require, modules, cache);
  require._cache = cache;
  require.hmr = hmr && hmr.wrap;
  require.brunch = true;
  globals.require = require;
})();

(function() {
var global = typeof window === 'undefined' ? this : window;
var __makeRelativeRequire = function(require, mappings, pref) {
  var none = {};
  var tryReq = function(name, pref) {
    var val;
    try {
      val = require(pref + '/node_modules/' + name);
      return val;
    } catch (e) {
      if (e.toString().indexOf('Cannot find module') === -1) {
        throw e;
      }

      if (pref.indexOf('node_modules') !== -1) {
        var s = pref.split('/');
        var i = s.lastIndexOf('node_modules');
        var newPref = s.slice(0, i).join('/');
        return tryReq(name, newPref);
      }
    }
    return none;
  };
  return function(name) {
    if (name in mappings) name = mappings[name];
    if (!name) return;
    if (name[0] !== '.' && pref) {
      var val = tryReq(name, pref);
      if (val !== none) return val;
    }
    return require(name);
  }
};
require.register("leaflet-polycolor.js", function(exports, require, module) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (L) {
  var Renderer = L.Renderer.RendererGradient = L.Canvas.extend({
    _updatePoly: function _updatePoly(layer) {
      var options = layer.options;

      if (!this._drawing) return;

      var i = void 0,
          j = void 0,
          len2 = void 0,
          p = void 0,
          prev = void 0;
      var parts = layer._parts;
      var len = parts.length;
      var ctx = this._ctx;

      if (!len) return;

      this._layers[layer._leaflet_id] = layer;

      if (options.stroke && options.weight !== 0) {
        for (i = 0; i < len; i++) {
          for (j = 0, len2 = parts[i].length - 1; j < len2; j++) {
            p = parts[i][j + 1];
            prev = parts[i][j];

            ctx.beginPath();

            ctx.moveTo(prev.x, prev.y);
            ctx.lineTo(p.x, p.y);

            this._stroke(ctx, layer, prev, p, j);
          }
        }
      }

      if (options.fill) {
        ctx.beginPath();

        for (i = 0; i < len; i++) {
          for (j = 0, len2 = parts[i].length - 1; j < len2; j++) {
            p = parts[i][j + 1];
            prev = parts[i][j];

            if (j === 0) ctx.moveTo(prev.x, prev.y);
            ctx.lineTo(p.x, p.y);
          }
        }

        this._fill(ctx, layer, prev, p, j);
      }
    },

    _fill: function _fill(ctx, layer, prev, p, j) {
      var options = layer.options;

      if (options.fill) {
        ctx.globalAlpha = options.fillOpacity;
        ctx.fillStyle = options.fillColor || options.color;

        ctx.fill(options.fillRule || 'evenodd');
      }
    },

    _stroke: function _stroke(ctx, layer, prev, p, j) {
      var options = layer.options;

      if (options.stroke && options.weight !== 0) {
        if (ctx.setLineDash) {
          ctx.setLineDash(layer.options && layer.options._dashArray || []);
        }

        ctx.globalAlpha = options.opacity;
        ctx.lineWidth = options.weight;
        ctx.strokeStyle = options.useGradient ? this._getStrokeGradient(ctx, layer, prev, p, j) : options.colors[j] || options.color;

        ctx.lineCap = options.lineCap;
        ctx.lineJoin = options.lineJoin;

        ctx.stroke();

        ctx.closePath();
      }
    },

    _getStrokeGradient: function _getStrokeGradient(ctx, layer, prev, p, j) {
      var options = layer.options;

      // Create a gradient for each segment, pick start and end colors from colors options
      var gradient = ctx.createLinearGradient(prev.x, prev.y, p.x, p.y);
      var gradientStartRGB = options.colors[j] || options.color;
      var gradientEndRGB = options.colors[j + 1] || options.color;

      gradient.addColorStop(0, gradientStartRGB);
      gradient.addColorStop(1, gradientEndRGB);

      return gradient;
    }
  });

  var Polycolor = L.Polycolor = L.Polyline.extend({
    _colorParts: [],

    options: {
      colors: [],
      useGradient: true
    },

    initialize: function initialize(latlngs, options) {
      L.Util.setOptions(this, options);

      this.options.renderer = new Renderer();

      this._setLatLngs(latlngs);
      this._colorParts = [];
    },

    // TODO add clip and smoothFactor
    _clipPoints: function _clipPoints() {
      var bounds = this._renderer._bounds;

      this._parts = [];
      this._colorParts = [];
      if (!this._pxBounds || !this._pxBounds.intersects(bounds)) {
        return;
      }

      this._parts = this._rings;
      this._colorParts = this.options.colors;
    },

    _update: function _update() {
      if (!this._map) return;

      this._clipPoints();
      this._updatePath();
    }
  });

  // Factory
  L.polycolor = function (latlngs, options) {
    return new L.Polycolor(latlngs, options);
  };

  return Polycolor;
};
});

;require.register("___globals___", function(exports, require, module) {
  
});})();require('___globals___');


//# sourceMappingURL=leaflet-polycolor.min.js.map